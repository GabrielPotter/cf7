// Extended PropertyGridFromSchema.tsx with array handling and collapsible arrays and collapsible array items
import React, { useState } from "react";
import {
  TextField,
  Typography,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Switch,
  FormControlLabel,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Box,
  Button,
  IconButton,
  Paper,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import DeleteIcon from "@mui/icons-material/Delete";
import AddIcon from "@mui/icons-material/Add";

// --- Types ---

export type JSONSchemaProperty =
  | StringSchema
  | NumberSchema
  | BooleanSchema
  | ObjectSchema
  | ArraySchema;

export type StringSchema = {
  type: "string";
  title?: string;
  enum?: string[];
  format?: "file" | "folder";
};

export type NumberSchema = {
  type: "number";
  title?: string;
};

export type BooleanSchema = {
  type: "boolean";
  title?: string;
};

export type ObjectSchema = {
  type: "object";
  title?: string;
  properties: Record<string, JSONSchemaProperty>;
};

export type ArraySchema = {
  type: "array";
  title?: string;
  items: JSONSchemaProperty;
};

export type JSONSchemaType = ObjectSchema;

interface PropertyGridFromSchemaProps<T extends Record<string, any>> {
  schema: JSONSchemaType;
  data: T;
  onChange: (updated: T) => void;
  level?: number;
}

export function PropertyGrid<T extends Record<string, any>>({
  schema,
  data,
  onChange,
  level = 0,
}: PropertyGridFromSchemaProps<T>) {
  const handleFieldChange = (key: string, value: any) => {
    onChange({ ...data, [key]: value });
  };

  const [itemExpandedStates, setItemExpandedStates] = useState<Record<string, boolean>>({});

  const renderField = (key: string, property: JSONSchemaProperty) => {
    const value = data?.[key as keyof T];

    switch (property.type) {
      case "string":
        if (property.format === "file" || property.format === "folder") {
          const openDialog = async () => {
            const selected =
              property.format === "file"
                ? await (window as any).filesysAPI.selectFile()
                : await (window as any).filesysAPI.selectFolder();
            if (selected) handleFieldChange(key, selected);
          };

          return (
            <Box sx={{ display: "flex", gap: 1 }}>
              <TextField
                fullWidth
                size="small"
                label={property.title || key}
                value={value || ""}
                onChange={(e) => handleFieldChange(key, e.target.value)}
              />
              <Button variant="outlined" size="small" onClick={openDialog}>üìÅ</Button>
            </Box>
          );
        }
        if (property.enum) {
          return (
            <FormControl fullWidth size="small">
              <InputLabel>{property.title || key}</InputLabel>
              <Select
                value={value || ""}
                label={property.title || key}
                onChange={(e) => handleFieldChange(key, e.target.value)}
              >
                {property.enum.map((opt) => (
                  <MenuItem key={opt} value={opt}>{opt}</MenuItem>
                ))}
              </Select>
            </FormControl>
          );
        }
        return (
          <TextField
            fullWidth
            variant="outlined"
            size="small"
            label={property.title || key}
            value={value || ""}
            onChange={(e) => handleFieldChange(key, e.target.value)}
          />
        );

      case "number":
        return (
          <TextField
            fullWidth
            variant="outlined"
            size="small"
            type="number"
            label={property.title || key}
            value={value ?? ""}
            onChange={(e) => handleFieldChange(key, parseFloat(e.target.value))}
          />
        );

      case "boolean":
        return (
          <FormControlLabel
            label={property.title || key}
            control={
              <Switch
                checked={Boolean(value)}
                onChange={(e) => handleFieldChange(key, e.target.checked)}
              />
            }
          />
        );

      case "array":
        const safeArray: any[] = Array.isArray(value) ? value : [];
        const [expanded, setExpanded] = useState(true);
        const isObjectArray = property.items.type === "object";
        return (
          <Accordion
            disableGutters
            expanded={expanded}
            onChange={() => setExpanded((prev) => !prev)}
            sx={{ backgroundColor: "#f4f4f4" }}
          >
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography variant="subtitle1">{property.title || key}</Typography>
            </AccordionSummary>
            <AccordionDetails>
              {safeArray.map((item: any, index: number) => {
                const itemKey = `${key}-${index}`;

                if (isObjectArray) {
                  const isItemExpanded = itemExpandedStates[itemKey] ?? true;
                  const toggleItemExpanded = () => {
                    setItemExpandedStates(prev => ({
                      ...prev,
                      [itemKey]: !prev[itemKey],
                    }));
                  };
                  return (
                    <Accordion
                      key={itemKey}
                      disableGutters
                      expanded={isItemExpanded}
                      onChange={toggleItemExpanded}
                      sx={{ backgroundColor: "#fefefe", mb: 1 }}
                    >
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Typography variant="body2">Item {index + 1}</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                          <Box sx={{ flexGrow: 1 }}>
                            <PropertyGrid
                              schema={property.items as ObjectSchema}
                              data={item}
                              onChange={(newItem) => {
                                const updated = [...safeArray];
                                updated[index] = newItem;
                                handleFieldChange(key, updated);
                              }}
                              level={level + 1}
                            />
                          </Box>
                          <IconButton onClick={() => {
                            const updated = [...safeArray];
                            updated.splice(index, 1);
                            handleFieldChange(key, updated);
                          }}>
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      </AccordionDetails>
                    </Accordion>
                  );
                } else {
                  return (
                    <Box key={itemKey} sx={{ display: "flex", alignItems: "center", gap: 1, mb: 1 }}>
                      <TextField
                        fullWidth
                        size="small"
                        value={item}
                        onChange={(e) => {
                          const updated = [...safeArray];
                          updated[index] = e.target.value;
                          handleFieldChange(key, updated);
                        }}
                      />
                      <IconButton onClick={() => {
                        const updated = [...safeArray];
                        updated.splice(index, 1);
                        handleFieldChange(key, updated);
                      }}>
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Box>
                  );
                }
              })}
              <Button
                variant="outlined"
                size="small"
                startIcon={<AddIcon />}
                onClick={() => {
                  const updated: any[] = [...safeArray];
                  if (property.items.type === "object") {
                    updated.push({});
                  } else {
                    updated.push("");
                  }
                  handleFieldChange(key, updated);
                }}
              >
                Add
              </Button>
            </AccordionDetails>
          </Accordion>
        );

      case "object":
        return (
          <NestedObjectEditor
            key={key}
            title={property.title || key}
            schema={property}
            data={value || {}}
            onChange={(newVal) => handleFieldChange(key, newVal)}
            level={level + 1}
          />
        );

      default:
        return null;
    }
  };

  return (
    <Box>
      {Object.entries(schema.properties).map(([key, prop]) => (
        <Box key={key} sx={{ mb: 2 }}>
          {renderField(key, prop)}
        </Box>
      ))}
    </Box>
  );
}

// --- Nested Object Editor ---

type NestedEditorProps = {
  title: string;
  schema: ObjectSchema;
  data: Record<string, any>;
  onChange: (updated: Record<string, any>) => void;
  level: number;
};

const NestedObjectEditor: React.FC<NestedEditorProps> = ({
  title,
  schema,
  data,
  onChange,
  level,
}) => {
  const [expanded, setExpanded] = useState(true);
  return (
    <Accordion
      disableGutters
      expanded={expanded}
      onChange={() => setExpanded((prev) => !prev)}
      sx={{ width: "100%", backgroundColor: "#f9f9f9" }}
    >
      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
        <Typography variant="subtitle1">{title}</Typography>
      </AccordionSummary>
      <AccordionDetails>
        <Box sx={{ pl: level * 2 }}>
          <PropertyGrid
            schema={schema}
            data={data}
            onChange={onChange}
            level={level}
          />
        </Box>
      </AccordionDetails>
    </Accordion>
  );
};
